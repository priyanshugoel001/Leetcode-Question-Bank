class Trienode
{
    public:
  Trienode* left;
  Trienode* right;
};

void insert(int n,Trienode* head)
{
    Trienode* curr=head;
    for(int i=31;i>=0;i--)
    {
        int bit=n>>i;
        if(bit&1)
        {
            if(curr->right)
            {
                curr=curr->right;
            }
            else
            {
                curr->right=new Trienode();
                curr=curr->right;
            }
        }
        else
        {
            if(curr->left)
            {
                curr=curr->left;
            }
            else
            {
                curr->left=new Trienode();
                curr=curr->left;
            }
        }
    }
}

class Solution {
public:
    int getmax(vector<int> nums,Trienode* head)
    {
        int omax=0;
        for(int i=0;i<nums.size();i++)
        {
            Trienode* curr=head;
            int val=nums[i];
            int tempmax=0;
            for(int j=31;j>=0;j--)
            {
                int bit=(val>>j)&1;
                if(bit)
                {
                    if(curr->left)
                    {
                        tempmax+=pow(2,j);
                        curr=curr->left;
                    }
                    else
                    {
                        curr=curr->right;
                    }
                }
                else
                {
                    if(curr->right)
                    {
                        tempmax+=pow(2,j);
                        curr=curr->right;
                    }
                    else
                    {
                        curr=curr->left;
                    }
                }
            }
            omax=max(omax,tempmax);
        }
        return omax;
    }
    int findMaximumXOR(vector<int>& nums) {
        Trienode* head=new Trienode();
        for(int i=0;i<nums.size();i++)
        {
            insert(nums[i],head);
        }
        
        return getmax(nums,head);
        
    }
};